#! /bin/bash

IMG_BASE="_MG_"

photo_rm() {
  if [ -z $1 ]; then
    echo "`usage`"
    echo "Error: Need at least one file to remove."
    exit 1
  fi
  for img in $@; do
    rm -f "$IMG_BASE$img.JPG"
    rm -f "$IMG_BASE$img.CR2"
  done;
}

photo_sort() {
  if [ -z $1 ]; then
    path="`pwd`"
  else
    path="$1"
  fi
  parent=`basename "$path"`
  if [ "$parent" == "." ]; then
    return 1
  fi
  jpg="$path"/"$parent"-jpg
  raw="$path"/"$parent"-raw

  mkdir -p "$jpg"
  mkdir -p "$raw"

  echo "Moving "$path"/*.JPG to "$jpg""
  mv "$path"/*.JPG "$jpg" 2>/dev/null

  echo "Moving "$path"/*.CR2 to "$raw""
  mv "$path"/*.CR2 "$raw" 2>/dev/null
}

photo_mv() {
  if [ -z $1 ]; then
    echo "`usage`"
    echo "Error: need dst directory"
    exit 1
  fi

  if [ -z $4 ]; then # no limits
    if [ -z $2 ]; then # $src defaults to current dir
      src="."
      dst="$1"
    else
      src="$1"
      dst="$2"
    fi
  else
    src="$1"
    dst="$2"
  fi

  mkdir -p $dst

  if [[ ( -z $3 ) && ( -z $4) ]]; then
    cmd="mv "$src/$IMG_BASE*" "$dst""
  else
    cmd="mv "$src/$IMG_BASE{$3..$4}*" "$dst""
  fi
  echo $cmd
  $cmd 2>/dev/null

}

usage() {
  echo "usage: photos -rm img1 img2 ... imgN"
  echo "       photos -sort [--all] [source]"
  echo "       photos -mv src dst [lower_limit] [upper_limit]"
}

if [ "$1"  == "-sort" ]; then
  if [ "$2" == "--all" ]; then
    src=$3
    if [ -z $src ]; then # no src
      src=`dirname pwd`
    fi
    for dir in `find $src -type d | grep -v "jpg\|raw"`; do
      photo_sort $dir
    done;
  else
    photo_sort $2
  fi
elif [ "$1" ==  "-rm" ]; then
    photo_rm ${*:2} # all args except the first
elif [ "$1" ==  "-mv" ]; then
    photo_mv ${*:2} # all args except the first
else
  usage
fi
